import { Platform, Alert, Linking } from 'react-native';
import * as Device from 'expo-device';
import * as Battery from 'expo-battery';

export const powerModeService = {
  
  // Verificar si el modo ahorro de energ√≠a est√° activo
  async isPowerSavingModeActive(): Promise<boolean> {
    try {
      if (Platform.OS === 'android') {
        // En Android, verificar estado de bater√≠a
        const batteryState = await Battery.getBatteryStateAsync();
        const powerSaveMode = await Battery.isLowPowerModeEnabledAsync();
        return powerSaveMode;
      } 
      else if (Platform.OS === 'ios') {
        // En iOS, verificar Low Power Mode
        const powerSaveMode = await Battery.isLowPowerModeEnabledAsync();
        return powerSaveMode;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå Error verificando modo ahorro energ√≠a:', error);
      return false;
    }
  },

  // Verificar permisos de optimizaci√≥n de bater√≠a (Android)
  async checkBatteryOptimization(): Promise<boolean> {
    try {
      if (Platform.OS === 'android') {
        // Android puede limitar apps en background
        // Esto requiere verificaci√≥n manual del usuario
        return true; // Asumir que puede estar optimizado
      }
      return false;
    } catch (error) {
      console.error('‚ùå Error verificando optimizaci√≥n bater√≠a:', error);
      return false;
    }
  },

  // Mostrar alerta sobre modo ahorro de energ√≠a
  async showPowerSavingAlert(): Promise<void> {
    const deviceType = Device.deviceType;
    const platform = Platform.OS;
    
    let title = '‚ö° Modo Ahorro de Energ√≠a Detectado';
    let message = '';
    let instructions = '';

    if (platform === 'android') {
      message = 'El modo ahorro de energ√≠a est√° activo. Esto puede limitar las notificaciones cuando la app est√© cerrada.';
      instructions = 'Para recibir notificaciones:\n\n1. Ve a Configuraci√≥n\n2. Bater√≠a > Ahorro de energ√≠a\n3. Desactiva el modo ahorro\n4. O a√±ade NoteDo a apps exentas';
    } else if (platform === 'ios') {
      message = 'El modo de bajo consumo est√° activo. Esto puede limitar las notificaciones en segundo plano.';
      instructions = 'Para recibir notificaciones:\n\n1. Ve a Configuraci√≥n\n2. Bater√≠a\n3. Desactiva "Modo de bajo consumo"';
    } else {
      message = 'El modo ahorro de energ√≠a puede estar limitando las notificaciones.';
      instructions = 'Verifica la configuraci√≥n de energ√≠a de tu dispositivo.';
    }

    Alert.alert(
      title,
      `${message}\n\n${instructions}`,
      [
        {
          text: 'Entendido',
          style: 'default'
        },
        {
          text: 'Abrir Configuraci√≥n',
          style: 'default',
          onPress: () => {
            this.openBatterySettings();
          }
        }
      ],
      { cancelable: true }
    );
  },

  // Mostrar alerta sobre optimizaci√≥n de bater√≠a (Android)
  async showBatteryOptimizationAlert(): Promise<void> {
    if (Platform.OS !== 'android') return;

    Alert.alert(
      'üîã Optimizaci√≥n de Bater√≠a',
      'Para garantizar que las notificaciones funcionen correctamente, te recomendamos desactivar la optimizaci√≥n de bater√≠a para NoteDo.\n\n¬øQuieres ver las instrucciones?',
      [
        {
          text: 'Ahora no',
          style: 'cancel'
        },
        {
          text: 'Ver instrucciones',
          style: 'default',
          onPress: () => {
            this.showBatteryOptimizationInstructions();
          }
        }
      ]
    );
  },

  // Mostrar instrucciones detalladas para optimizaci√≥n de bater√≠a
  showBatteryOptimizationInstructions(): void {
    Alert.alert(
      'üì± Instrucciones Android',
      'Para desactivar la optimizaci√≥n de bater√≠a:\n\n' +
      '1. Ve a Configuraci√≥n\n' +
      '2. Aplicaciones > NoteDo\n' +
      '3. Bater√≠a > Optimizaci√≥n de bater√≠a\n' +
      '4. Selecciona "No optimizar"\n\n' +
      'O tambi√©n:\n' +
      '1. Configuraci√≥n > Bater√≠a\n' +
      '2. Optimizaci√≥n de bater√≠a\n' +
      '3. Busca NoteDo\n' +
      '4. Selecciona "No optimizar"',
      [
        {
          text: 'Entendido',
          style: 'default'
        }
      ]
    );
  },

  // Abrir configuraci√≥n de bater√≠a del sistema
  async openBatterySettings(): Promise<void> {
    try {
      if (Platform.OS === 'android') {
        await Linking.openSettings();
      } else if (Platform.OS === 'ios') {
        await Linking.openURL('App-prefs:BATTERY_USAGE');
      }
    } catch (error) {
      console.error('‚ùå Error abriendo configuraci√≥n:', error);
      Alert.alert(
        'Error',
        'No se pudo abrir la configuraci√≥n autom√°ticamente. Por favor, √°brela manualmente desde Configuraci√≥n > Bater√≠a.'
      );
    }
  },

  // Verificar todo y mostrar alertas si es necesario
  async checkAndAlertPowerIssues(): Promise<void> {
    try {
      console.log('üîç Verificando configuraci√≥n de energ√≠a...');
      
      // Verificar modo ahorro de energ√≠a
      const isPowerSaving = await this.isPowerSavingModeActive();
      
      if (isPowerSaving) {
        console.log('‚ö†Ô∏è Modo ahorro de energ√≠a detectado');
        await this.showPowerSavingAlert();
        return; // Solo mostrar una alerta a la vez
      }

      // Si no hay modo ahorro, verificar optimizaci√≥n en Android
      if (Platform.OS === 'android') {
        // Mostrar alerta informativa sobre optimizaci√≥n de bater√≠a
        // Solo la primera vez o ocasionalmente
        const shouldShowOptimizationAlert = await this.shouldShowOptimizationAlert();
        if (shouldShowOptimizationAlert) {
          await this.showBatteryOptimizationAlert();
        }
      }

      console.log('‚úÖ Verificaci√≥n de energ√≠a completada');
      
    } catch (error) {
      console.error('‚ùå Error verificando configuraci√≥n energ√≠a:', error);
    }
  },

  // Verificar si debe mostrar alerta de optimizaci√≥n (evitar spam)
  async shouldShowOptimizationAlert(): Promise<boolean> {
    try {
      // L√≥gica simple: mostrar solo algunas veces
      // En una implementaci√≥n real, podr√≠as usar AsyncStorage para controlar frecuencia
      const randomChance = Math.random();
      return randomChance < 0.3; // 30% de probabilidad
    } catch (error) {
      return false;
    }
  },

  // Obtener informaci√≥n del estado de energ√≠a
  async getPowerStatus(): Promise<{
    isPowerSaving: boolean;
    batteryLevel: number;
    batteryState: string;
    deviceType: string;
  }> {
    try {
      const isPowerSaving = await this.isPowerSavingModeActive();
      const batteryLevel = await Battery.getBatteryLevelAsync();
      const batteryState = await Battery.getBatteryStateAsync();
      const deviceType = Device.deviceType || 'unknown';

      return {
        isPowerSaving,
        batteryLevel: Math.round(batteryLevel * 100),
        batteryState: String(batteryState),
        deviceType: String(deviceType)
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo estado energ√≠a:', error);
      return {
        isPowerSaving: false,
        batteryLevel: 100,
        batteryState: 'unknown',
        deviceType: 'unknown'
      };
    }
  }
};
